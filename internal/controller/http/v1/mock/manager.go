// Code generated by mockery v2.16.0. DO NOT EDIT.

package mock

import (
	context "context"
	entity "payment_processing_system/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// ManagerUseCase is an autogenerated mock type for the ManagerUseCase type
type ManagerUseCase struct {
	mock.Mock
}

// GetBalanceByID provides a mock function with given fields: ctx, id
func (_m *ManagerUseCase) GetBalanceByID(ctx context.Context, id int64) (*entity.Balance, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Balance
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Balance); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Balance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewManagerUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewManagerUseCase creates a new instance of ManagerUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManagerUseCase(t mockConstructorTestingTNewManagerUseCase) *ManagerUseCase {
	mock := &ManagerUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
