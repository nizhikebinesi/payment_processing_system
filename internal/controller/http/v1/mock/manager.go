// Code generated by mockery v2.16.0. DO NOT EDIT.

package mock

import (
	context "context"
	entity "payment_processing_system/internal/domain/entity"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"
)

// ManagerUseCase is an autogenerated mock type for the ManagerUseCase type
type ManagerUseCase struct {
	mock.Mock
}

// ChangeAmount provides a mock function with given fields: ctx, id, amount
func (_m *ManagerUseCase) ChangeAmount(ctx context.Context, id *int64, amount decimal.Decimal) (*entity.Transaction, error) {
	ret := _m.Called(ctx, id, amount)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *int64, decimal.Decimal) *entity.Transaction); ok {
		r0 = rf(ctx, id, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *int64, decimal.Decimal) error); ok {
		r1 = rf(ctx, id, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceByID provides a mock function with given fields: ctx, id
func (_m *ManagerUseCase) GetBalanceByID(ctx context.Context, id int64) (*entity.Balance, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Balance
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Balance); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Balance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceTransactions provides a mock function with given fields: ctx, balanceID, limit, offset, orderBy
func (_m *ManagerUseCase) GetBalanceTransactions(ctx context.Context, balanceID int64, limit uint64, offset uint64, orderBy string) ([]*entity.Transaction, error) {
	ret := _m.Called(ctx, balanceID, limit, offset, orderBy)

	var r0 []*entity.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, int64, uint64, uint64, string) []*entity.Transaction); ok {
		r0 = rf(ctx, balanceID, limit, offset, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, uint64, uint64, string) error); ok {
		r1 = rf(ctx, balanceID, limit, offset, orderBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PayForService provides a mock function with given fields: ctx, id, amount
func (_m *ManagerUseCase) PayForService(ctx context.Context, id *int64, amount decimal.Decimal) (*entity.Transaction, error) {
	ret := _m.Called(ctx, id, amount)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *int64, decimal.Decimal) *entity.Transaction); ok {
		r0 = rf(ctx, id, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *int64, decimal.Decimal) error); ok {
		r1 = rf(ctx, id, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: ctx, idFrom, idTo, amount
func (_m *ManagerUseCase) Transfer(ctx context.Context, idFrom *int64, idTo *int64, amount decimal.Decimal) (*entity.Transaction, error) {
	ret := _m.Called(ctx, idFrom, idTo, amount)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *int64, *int64, decimal.Decimal) *entity.Transaction); ok {
		r0 = rf(ctx, idFrom, idTo, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *int64, *int64, decimal.Decimal) error); ok {
		r1 = rf(ctx, idFrom, idTo, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewManagerUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewManagerUseCase creates a new instance of ManagerUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewManagerUseCase(t mockConstructorTestingTNewManagerUseCase) *ManagerUseCase {
	mock := &ManagerUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
