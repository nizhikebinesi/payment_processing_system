// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yY3W/bNhDA/xWC68M+FMlrh6HTy5ak3RBgaIo2wB5Sr6Cpk8WWH+rxVNcL9L8PpORY",
	"tuwk3VLMA/LmiPfFu98dyVxx6UztLFjyPL/iXlZgRPx5IrSwEsJPofV5yfPLK/4IoeQ5/ypbq2W9TvYC",
	"FiudNrnitKyB59zN3oEk3k7bhD9HdBgM1uhqQFIQPRnwXsyjp17JEyo7522bcIQPjUIoeH55LThNtq0n",
	"fOB95EAY11iK3wURoOU5//PyaPrz5eTop+m3b96k3a/vHvFkO4SEqyJolg6NIJ5zZenHH9ZyyhLMAUex",
	"9j6j+p54L1BYLyQpZ+875kIQvCVl4K1EEASbWwirR2H1ZtWmLj5TFTwpK8KG3u7Jmm20FjMNPCdsYJzF",
	"UbqbfflOuHcNSvjnnjwJavwO7BJO3ZfbgFQFH4YxykCyxqCzuKsyu1J+HdwudLa4uXN3DvX2dOhAJCZG",
	"ERh/dyd38NB/EohiyduQUGVLF1xIZ0nIiDwYoTTPuVV/Veo9zJQFr36Zh6+pdCZUV5hg5vVCzOeA7Pjl",
	"GbsAYXoKJaq6Sw8/Zl6YWkMUoUoQazx4JlgN5MkhMOGZsAw+dWLkWAHGWU8oCFgJghoEz5RlVAE7r8EG",
	"S0/SCfM1SFUqGcvNE66VBOsjNn14x7WQFbDH6YQnvMGwpYqo9nmWLRaLVMTl1OE863V99vvZ6fMXr58f",
	"PU4naUVGRxoV6eFuX4qlAUvsJToJ3gcyE/4R0Hdb/j6dpJOg52qwolY850/ipyTMkirWM5t1w9JnV6r4",
	"FZ1pMwrFKwHDlwvXxtHjfKzHZkovekFmnIUlK9EZ1hlhvdWQxWBk9TePsWBM1FkxMHGyPCt8jAuFAQL0",
	"kbFNf2fPmCuHpheoCJgryzBeg0TY1hqKLhY+bNVuBHSY3nGa3xqFkBIb2BfChfuXAUyDuq9doCJoPJ5M",
	"Vl0C3cEg6lr39GXvfDcM1h5u6tPrc7od9UsNxFZ+u24qRaPp3lx3d4AdjhsLn2qQBAWDlUybbIIaoZzD",
	"DiZfATVoQ1+vKjQTHgrmLBMsdIgGdvZsxOFvQH0uAomfDWIJJKt9BNw3gKcNIli5jCNK+VqL5aC/Yggf",
	"GsDlOgbZa/Ch5+0T7T/ibJXFg2Et2TPtTuMxHciysFgl/OvZsut/ob9hDlkB4TSPB0s4SpQPpnvZlD1r",
	"uh2EZQRmHTGhtVtAkY6IPI5T5Rz/CDPuvCxPrit8BzRD835hLKedOng6ccXy3ko1fDyM69XdosLWZCXs",
	"HOJRvGZ/cz/tFwR6+xY1DjVAQmuRA56lGW1d9m4crENhNlO2gIItFFW3DNcouHGrPOgZ+x7iePUOic2W",
	"7IipImHhSp6w9YNux6QNChtTFmxjrl8IwcD6LTBNxq+K7TiM+KRMY5htzAwwZATBN5p8iA5jSfZEopVR",
	"m6Hc/pQa+6/FPFywmHRag+zvt7vcBcHP9fYlT5wN1HZ0xgbGrhwOksNqVQQP+LFzNboC7T6pXkUV2Hvp",
	"7tfP7WsILUhwLGXP9OG05MO195b6ZzL81vsxOI3rbGBgREIn8mpD4gGB/xECzpYKzQ0MdAI3Q9DJPFBw",
	"wBS0CY8zuy/H+l9IeZZpJ4WunKf86eTpJBO14u20/TsAAP//6uXpX9IXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
