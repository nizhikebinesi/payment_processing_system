// Code generated by mockery v2.16.0. DO NOT EDIT.

package mock

import (
	context "context"
	entity "payment_processing_system/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// CancelByID provides a mock function with given fields: ctx, id
func (_m *TransactionService) CancelByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CannotApplyByID provides a mock function with given fields: ctx, id
func (_m *TransactionService) CannotApplyByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompletedByID provides a mock function with given fields: ctx, id
func (_m *TransactionService) CompletedByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDefaultTransaction provides a mock function with given fields: ctx, sourceID, destinationID, amount, ttype
func (_m *TransactionService) CreateDefaultTransaction(ctx context.Context, sourceID *string, destinationID *string, amount float32, ttype entity.TransactionType) (*string, error) {
	ret := _m.Called(ctx, sourceID, destinationID, amount, ttype)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string, float32, entity.TransactionType) *string); ok {
		r0 = rf(ctx, sourceID, destinationID, amount, ttype)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string, *string, float32, entity.TransactionType) error); ok {
		r1 = rf(ctx, sourceID, destinationID, amount, ttype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TransactionService) GetByID(ctx context.Context, id string) (*entity.Transaction, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessingByID provides a mock function with given fields: ctx, id
func (_m *TransactionService) ProcessingByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShouldRetryByID provides a mock function with given fields: ctx, id
func (_m *TransactionService) ShouldRetryByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService(t mockConstructorTestingTNewTransactionService) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
